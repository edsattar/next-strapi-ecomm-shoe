// Importing necessary libraries and types
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { CartItemType } from "../types";

// This interface describes the type for payload when updating cart items
interface UpdatePayloadType {
  id: number;
  key: keyof CartItemType; // keyof CartItemType ensures that key is one of the keys in CartItemType
  value: string;
}

// The createSlice function automatically generates action creators and action types
export const cartSlice = createSlice({
  name: "cart", // The name of this slice of the state
  initialState: {
    // The initial state of this slice
    cartItems: [] as CartItemType[],
  },
  reducers: {
    // The reducer functions for this slice
    // The addToCart reducer handles the action of adding an item to the cart
    addToCart: (state, action: PayloadAction<CartItemType>) => {
      const newItem = action.payload; // The new item to be added
      // Check if the item already exists in the cart
      const existingItem = state.cartItems.find(
        (cartItem) =>
          cartItem.id === newItem.id &&
          cartItem.selectedSize === newItem.selectedSize
      );
      if (existingItem) {
        // If the item exists, increase its quantity
        existingItem.selectedQty++;
      } else {
        // If the item does not exist, add it to the cart
        state.cartItems.push(newItem);
      }
    },

    // The updateCart reducer handles the action of updating a specific field of a cart item
    updateCart: (state, action: PayloadAction<UpdatePayloadType>) => {
      const { id, key, value } = action.payload; // Extract the values from the action payload
      if (key === "selectedQty") {
        // If the key is 'selectedQty', update the quantity of the item
        state.cartItems[id].selectedQty = parseInt(value);
      } else if (key === "selectedSize") {
        // If the key is 'selectedSize', update the size of the item
        state.cartItems[id].selectedSize = value;
      }
    },

    // The removeFromCart reducer handles the action of removing an item from the cart
    removeFromCart: (state, action) => {
      const index = action.payload; // The index of the item to be removed
      state.cartItems.splice(index, 1); // Remove the item from the array
    },
  },
});

// Export the action creators generated by createSlice
export const { addToCart, updateCart, removeFromCart } = cartSlice.actions;

// Export the reducer function generated by createSlice
export default cartSlice.reducer;
